name: OIDC test only deploy on PROD
run-name: ${{ github.actor }} is doing Serverless Deployment with OIDC

on:
  pull_request:
    branches: [ "prod" ]

env:
  AWS_REGION: "ap-southeast-1"

permissions:
  id-token: write

jobs:
  deploy-serverless:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::255945442255:role/ds-oidc-prod
          aws-region: ${{ env.AWS_REGION }}
      - name: Auth with AWS
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::255945442255:role/ds-oidc-prod
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=ap-northeast-1

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
          apt-get install awscli
          temp_role=$(aws sts assume-role-with-web-identity \
          --web-identity-token file://$AWS_WEB_IDENTITY_TOKEN_FILE \                              --role-arn "arn:aws:iam::255945442255:role/ds-oidc-prod" \                    --role-session-name "<some_session_name>")
          
          export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId) >> GITHUB_ENV
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey) >> $GITHUB_ENV
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken) >> $GITHUB_ENV
          echo "::add-mask::$AWS_SESSION_TOKEN"
      - name: Display Identity
        run: aws sts get-caller-identity
      - name: Run NPM clean install
        run: npm ci
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Serverless Authentication
        run: sls config credentials --provider aws --key ${{ env.AWS_ACCESS_KEY_ID }} --secret ${{ env.AWS_SECRET_ACCESS_KEY }}
      - name: Serverless Deploy
        run: serverless deploy --stage prod --verbose
